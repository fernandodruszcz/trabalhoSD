// No programa simulamos a execucao do algoritmo de diagnostico VCube (versao 2) em um sistema distribuido

// Autores: Prof Elias e Fernando Francisco Druszcz
// Ultima modificacao: 15/11/2021

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "smpl.h"
#include "cisj.h"

// --- Calcula numero de clusters de um sistema com N nodos

int quantidadeClusters(int n){
	return (int)(ceil(log(n)/log(2)));
}

// ---	Calcula a quantidade de filas a qual um nodo pertence 
//		no intervalo de testes s

int quantidadeFilas(int s){
	return (int)(floor((s<<(2))/2)); // retorna o piso de 2 elevado a s dividido por 2 
}

int ehPotenciaDois(int n){
	if(n == 0)
		return 0;
	return (ceil(log2(n)) == floor(log2(n)));
}

// ----- Eventos

#define test 1
#define fault 2
#define repair 3

const char *nomeEstados[] = {"Correto", "Falho"}; 	// um vetor com o nome dos status
									 			   	// uso := 	estado = status();
													//			nomeEstados[estado] -> "";

// --- Estrutura para indicar os testes do nodo

/* -----
Exemplo: 
	No primeiro intervalo de testes (s = 1)
	cada nodo testara a primeira sequencia de testes 
	E.g. em s = 1 o nodo 4 testara o nodo 5, pois C(5,1) = [4]
	No segundo intervalo de testes (s = 2)
	cada nodo testara a segunda sequencia de testes
	E.g. em s = 2 o nodo 4 testara o nodo 6, pois C(6,2) = [4,5] e
	se 5 estiver falho, tambem testara o nodo 7, pois C(7,2) = [5,4]

	Por isso cada nodo tera uma estrutura contendo os vetores de quais o nodo faz
	parte nos resultados da funcao C(i,s), para que o nodo saiba que ele deve testar i caso 
	os primeiros nodos (valores) de C(i,s) estejam falhos. Esse vetor esta na estrutura tipoTestar,
	na qual tambem ha a informacao de qual nodo deve ser testado


----- */

typedef struct testar{
	int token; // token do nodo que deve ser testado
	int *fila; // fila de nodos que devem testa-lo
	int tamFila;
} tipoTestar;

typedef struct sequenciaTestes{
	tipoTestar *filaTestes; // vetor de ponteiros para tipoTestar
	int numeroFilas; 
} tipoSequenciaTestes;

// ----- Descritor do nodo SMPL

typedef struct nodo{
	int id; // identificador facility SMPL

	int *state;	// vetor com o estado dos demais processos
				// nesse vetor as entradas impares indicam nodo falho,
				// enquanto as pares indicam nodo correto

	tipoSequenciaTestes *sequenciaTestes;	// estrutura contendo informacoes para teste 
	int s;	// inteiro para saber em qual intervalo de testes o nodo esta

	// outras variaveis locais dos nodos sao declaradas aqui
} tipoNodo;

// ----- Variaveis globais

tipoNodo *nodo;

// Log
int numeroTestes = 0;
int *tokensEvento;
int tamTokensEvento;
int stateEvento = -2;
int t;
int latencia;
int numeroTestesEvento;

// ----- Funcoes dos nodos

int devoTestar(int token, int *fila, int tamFila, int i){
	if(i < tamFila)
		if(fila[i] == token)
			return 1;
		else if(nodo[token].state[fila[i]] % 2 == 0)
			return 0;
		else{
			i++;
			return devoTestar(token, fila, tamFila, i);
		}
	else return 1;
}

void imprimeState(int token, int n){
	printf("\t");
	for(int i = 0; i < n; i++)
		printf(" [%d]", i);
	printf("\n");
	printf("\t");
	for(int i = 0; i < n; i++)
		printf("| %d ", nodo[token].state[i]);
	printf("|\n");
}

// ----- Funcoes de log

void ocorreuEvento(int token, int n){
	tokensEvento[tamTokensEvento] = token;
	tamTokensEvento++;

	int indice;
	for(int i = 0; i < n; i++){
		for(int j = 0; j < tamTokensEvento; j++)
			if(i != tokensEvento[j])
				indice = i;
	}
	stateEvento = nodo[indice].state[token] + 1;
	latencia = 0;
	numeroTestesEvento = 0;
	printf("!!!Novo evento ocorreu!!!\n");
}

void verificaConclusaoEvento(int n, int t){
	numeroTestesEvento++;
	int testar = 1;
	int stop = 0;
	for(int i = 0; i < n; i++){	// o primeiro nodo correto conta a latencia
		for(int j = 0; j < tamTokensEvento; j++)
			if(i == tokensEvento[j])
				testar = 0;
		if(testar){
			if(t == i){
				latencia++;
			}
			testar = 0;
		}
	}

	for(int i = 0; i < n; i++){
		for(int j = 0; j < tamTokensEvento; j++)
			if(i == tokensEvento[j])
				testar = 0;
		if(testar)
			if(nodo[i].state[tokensEvento[tamTokensEvento - 1]] != stateEvento)
				return;
		testar = 1;
	}
	printf("!!!Diagnóstico do evento foi concluído!!!\n");
	printf("---Latência: %d---\n", latencia);
	printf("---Testes realizados: %d---\n", numeroTestesEvento);
	stateEvento = -2;
}

// ----- Funcoes para teste

void printNodoCompleto(int indice, int n, int s){
	printf("Nodo token: %d\n", indice);
	printf("Imprimindo o vetor state:\n");
	printf("\t");
	for(int i = 0; i < n; i++)
		printf("| %d ", nodo[indice].state[i]);
	printf("|\n");
	printf("Imprimindo todas as sequências de testes:\n");
	for(int i = 0; i < s; i++){
		int numeroFilas = nodo[indice].sequenciaTestes[i].numeroFilas;
		tipoTestar *testar;
		testar = nodo[indice].sequenciaTestes[i].filaTestes;
		for(int j = 0; j < numeroFilas; j++){
			printf("\tTestar nodo %d\n", testar[j].token);
			printf("\t");
			for(int k = 0; k < testar[j].tamFila; k++)
				printf("| %d ", testar[j].fila[k]);
			printf("|\n");
		} // for 2
	} // for 1
	printf("----- Fim do nodo %d -----\n", indice);
} // printNodoCompleto


int main(int argc, char *argv[]){
	static int N, // n total de processos
			   numeroClusters,
			   token, // o processo que está executando em um instante de tempo 
			   event, 
			   r, i, s;
	static char faName[5]; // nome da facility

	int *vetorTestes;	// vetor que sera usado para armazenar os nodos que deverao ser testados
						// vetor termina em -1
	int tamVetorTestes;
	int numeroMaximoTestes;	// o numero maximo de testes que um nodo pode realizar
							// e o numero de clusters elevado ao quadrado dividido por 2

	if(argc != 2){
		puts("Uso correto: ./tempo <num-nodos>");
		return 1;
	}

	N = atoi(argv[1]);

	if(!ehPotenciaDois(N)){
		puts("Algoritmo não adaptado para num-nodos não potência de dois");
		return 1;
	}

	smpl(0, "Um exemplo de simulação");
	reset();
	stream(1);

	// ----- Inicializacao de variaveis

	numeroClusters = quantidadeClusters(N);
	nodo = (tipoNodo *) malloc(sizeof(tipoNodo)*N);

	for(i = 0; i < N; i++){
		// --- Nomeia cada nodo
		memset(faName, '\0', 5);
		sprintf(faName, "%d", i);
		nodo[i].id = facility(faName, 1);

		// --- Aloca e inicializa o vetor state para cada nodo
		nodo[i].state = (int *) malloc(sizeof(int)*N);
		for(int j = 0; j < N; j++)
			nodo[i].state[j] = -1;
		nodo[i].state[i] = 0;

		// --- Aloca o vetor sequenciaTestes
		nodo[i].sequenciaTestes = (tipoSequenciaTestes *)malloc(sizeof(tipoSequenciaTestes)*numeroClusters);

		for(int j = 1; j <= numeroClusters; j++){
			nodo[i].sequenciaTestes[j - 1].filaTestes = (tipoTestar *)malloc(sizeof(tipoTestar)*quantidadeFilas(j));
			nodo[i].sequenciaTestes[j - 1].numeroFilas = 0; // 0 para facilitar a logica mais adiante
		}
		nodo[i].s = 0;
	}

	numeroMaximoTestes = (int)(floor((numeroClusters<<(2))/2));
	vetorTestes = (int*)malloc(sizeof(int)*(numeroMaximoTestes));
	for(int j = 0; j < numeroMaximoTestes; j++)
		vetorTestes[j] = -1;
	tamVetorTestes = 0;

	// ----- Define quem cada nodo vai testar

	node_set* nodes;
	int *fila;
	int indice;
	int indiceFila;
	for(s = 1; s <= numeroClusters; s++)
		for(i = 0; i < N; i++){
			nodes = cis(i,s);
			fila = (int *)malloc(sizeof(int)*nodes -> size);
			for(int k = 0; k < nodes -> size; k++){
				fila[k] = nodes -> nodes[k];

				indice = nodes -> nodes[k];
				indiceFila = nodo[indice].sequenciaTestes[s - 1].numeroFilas;
				nodo[indice].sequenciaTestes[s - 1].numeroFilas++;
				nodo[indice].sequenciaTestes[s - 1].filaTestes[indiceFila].token = i;
				nodo[indice].sequenciaTestes[s - 1].filaTestes[indiceFila].tamFila = nodes -> size;
				nodo[indice].sequenciaTestes[s - 1].filaTestes[indiceFila].fila = fila;	// para nao ter que depois procurar cada 
																						// nodo pertencente a C(i,s), o vetor ja pode
																						// ser atribuido, uma vez que e um ponteiro
			} // for 3
		} // for 2

	// Log
	tokensEvento = (int *)malloc(sizeof(int)*N);
	tamTokensEvento = 0;
	// for(i = 0; i < N; i++)
	// 	printNodoCompleto(i, N, numeroClusters);

	//exit(0);

	// ----- Escalonando eventos

	for(i = 0; i < N; i++){
		schedule(test, 10.0, i); // estamos escalonando testes para todos os nodos executarem no tempo 10
	}
	/*// eventos do log7
	schedule(fault, 45.0, 8);	// o processo 1 falha no tempo 15
	schedule(fault, 90.0, 9);	
	schedule(fault, 150.0, 10);
	schedule(fault, 190.0, 11);
	schedule(fault, 230.0, 12);
	schedule(fault, 280.0, 13);
	schedule(fault, 330.0, 14);
	schedule(fault, 400.0, 15);
	schedule(fault, 440.0, 7);
	schedule(fault, 480.0, 6);
	schedule(fault, 550.0, 5);
	schedule(fault, 590.0, 4);
	schedule(fault, 640.0, 3);
	//*/
	// schedule(fault, 72.0, 3);	
	// schedule(repair, 88.0, 3);	

	// ----- Loop principal da simulacao

	while(time() < 800.0){
		cause(&event, &token); // verifica para cada token em cada tempo se ha evento para ocorrer
		switch(event){
			case test: 
				if(status(nodo[token].id) != 0) break; // testador esta falho, nao testa

				// ----- Descobre qual nodo deve ser testado

				s = nodo[token].s;
				int numeroFilas = nodo[token].sequenciaTestes[s].numeroFilas;

				// --- Para cada C(i,s) que o nodo pertence, verifica se os processos
				// que estao a sua frente estao falhos ou nao
				// se estiverem falhos o nodo deve testar aquele i

				tipoTestar *filaTestes = nodo[token].sequenciaTestes[s].filaTestes;
				for(int j = 0; j < numeroFilas; j++){
					int tamFila = filaTestes[j].tamFila;
					if(devoTestar(token, filaTestes[j].fila, tamFila, 0) == 1){
						tamVetorTestes++;
						vetorTestes[tamVetorTestes - 1] = filaTestes[j].token;
					}
				}


				// ----- Faz os testes e atualiza o vetor state

				for(int j = 0; j < tamVetorTestes; j++){
					int resultado, tokenTestado;
					tokenTestado = vetorTestes[j];
					resultado = status(nodo[tokenTestado].id);	// obtem o estado do nodo sendo testado

					// Log
					numeroTestes++;

					// a funcao abs e usada para caso o nodo esteja desconhecido (-1) o resto (nesse caso, a paridade) fique positivo
					if(resultado % 2 != abs(nodo[token].state[tokenTestado] % 2))	// se a paridade do resultado for diferente da no vetor state
						nodo[token].state[tokenTestado]++;							// muda a paridade do vetor state
					
					// Log
					printf("O nodo %d testou o %d %s no tempo %.2f\n", token, tokenTestado, nomeEstados[resultado], time());

					// --- Se o nodo estiver correto, obtem qualquer novidade que ele possua

					if(resultado % 2 == 0){
						// Log
						printf("\tE recebeu as seguintes novas informações:\n");

						// Para que ele nao atualize sua propria entrada no vetor state
						// pula o token == token
						for(int k = 0; k < token; k++){
							if(nodo[tokenTestado].state[k] > nodo[token].state[k]){
								nodo[token].state[k] = nodo[tokenTestado].state[k];

								// Log
								printf("\t\t state[%d] <- %d\n", k, nodo[token].state[k]);
							}
						}
						for(int k = token + 1; k < N; k++){
							if(nodo[tokenTestado].state[k] > nodo[token].state[k]){
								nodo[token].state[k] = nodo[tokenTestado].state[k];

								// Log
								printf("\t\t state[%d] <- %d\n", k, nodo[token].state[k]);
							}
						}
					}

				}
				// --- Log
				printf("O vetor state atualizado do token %d:\n", token);
				imprimeState(token, N);
				printf("---Fim dos testes do nodo %d no intervalo %d---\n\n", token, s);
				printf("Número total de testes até aqui: %d\n", numeroTestes);
				verificaConclusaoEvento(N, token);


				// reseta o vetor de testes
				for(int j = 0; j < numeroMaximoTestes; j++)
					vetorTestes[j] = -1;
				tamVetorTestes = 0;

				// --- Passa o nodo para o proximo intervalo de teste
				nodo[token].s++;
				if(nodo[token].s >= numeroClusters)
					nodo[token].s = 0;

				schedule(test, 10.0, token); // escalona novo teste para o tempo atual + 10
				break;
			case fault:
				r = request(nodo[token].id, token, 0);
				if(r != 0){
					puts("Não foi possível falhar o nodo");
					break;
				}
				printf("O nodo %d falhou no tempo %4.1f\n\n", token, time());
				ocorreuEvento(token, N);
				break;
			case repair:
				release(nodo[token].id, token);
				printf("O nodo %d recuperou no tempo %4.1f\n\n", token, time());
				schedule(test, 19.0, token);
				break;
		} // switch
	} // while
	return 0;
} // main